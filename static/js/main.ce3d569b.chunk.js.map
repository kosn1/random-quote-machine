{"version":3,"sources":["colorsArray.js","App.js","reportWebVitals.js","index.js"],"names":["COLORS_ARRAY","quoteWarehouse","App","useState","quote","setQuote","author","setAuthor","setRandomNumber","quotesArray","setQuotesArray","bgColor","setBgColor","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","console","log","useEffect","className","style","backgroundColor","id","color","icon","faQuoteLeft","faQuoteRight","href","encodeURI","faTwitter","onClick","randomInteger","Math","floor","length","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAWeA,G,MAXM,CAAC,UAAW,UAAW,UAAW,UAAW,UAClE,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,6BCAxCC,EAAiB,yIAoDNC,MAlDf,WACE,MAA0BC,mBAAS,oEAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA2BF,mBAAS,iBAApC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAuCJ,mBAAS,GAAhD,mBAAoBK,GAApB,WACA,EAAqCL,mBAAS,MAA9C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAA6BP,mBAAS,WAAtC,mBAAOQ,EAAP,KAAeC,EAAf,KAEMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBT,EAAeS,EAAWC,QAC1BC,QAAQC,IAAIH,GAJM,2CAAH,sDAqBjB,OAfAI,qBAAU,WACRV,EAAYZ,KAEX,CAACA,IAaF,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAACC,gBAAgBf,GAAvD,SACE,sBAAKgB,GAAG,YAAaF,MAAO,CAACG,MAAMjB,GAAnC,UACE,oBAAGgB,GAAG,OAAN,UACE,cAAC,IAAD,CAAiBE,KAAMC,MADzB,IACyC1B,EADzC,IACgD,cAAC,IAAD,CAAiByB,KAAME,SAEvE,oBAAGJ,GAAG,SAAN,eAAkBrB,KAGlB,sBAAKkB,UAAU,SAAf,UACE,mBAAGG,GAAG,cAAcF,MAAO,CAACC,gBAAgBf,GAAUqB,KAAMC,UAAU,yCAAD,OAA0C7B,EAA1C,aAAoDE,IAAzH,SAAoI,cAAC,IAAD,CAAiBuB,KAAMK,QAC3J,wBAAQP,GAAG,YAAYQ,QArBV,WACrB,IAAIC,EAAcC,KAAKC,MAAM7B,EAAY8B,OAASF,KAAKG,UACvDhC,EAAgB4B,GAChBxB,EAAWZ,EAAaoC,IACxB/B,EAASI,EAAY2B,GAAehC,OACpCG,EAAUE,EAAY2B,GAAe9B,SAgBmBmB,MAAO,CAACC,gBAAgBf,GAAxE,kCCvCG8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ce3d569b.chunk.js","sourcesContent":["const COLORS_ARRAY = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n'#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n'#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n'#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n'#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n'#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n'#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n'#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n'#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n'#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\nexport default COLORS_ARRAY;","import { useEffect, useState } from 'react';\nimport './App.scss';\nimport COLORS_ARRAY from \"./colorsArray\"\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { faQuoteRight } from \"@fortawesome/free-solid-svg-icons\";\n\nlet quoteWarehouse = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nfunction App() {\n  const [quote, setQuote] = useState(\"Everything youâ€™ve ever wanted is on the other side of fear.\"); \n  const [author,setAuthor] = useState(\"George Addair\");\n  const [randomNumber,setRandomNumber] = useState(0);\n  const [quotesArray,setQuotesArray] = useState(null);\n  const [bgColor,setBgColor] = useState(\"#282c34\")\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArray(parsedJSON.quotes);\n    console.log(parsedJSON);\n  }\n  useEffect(()=>{\n    fetchQuotes(quoteWarehouse)\n    }\n    ,[quoteWarehouse])\n  \n  \n  const getRandomQuote = () =>{\n    let randomInteger=Math.floor(quotesArray.length * Math.random());\n    setRandomNumber(randomInteger);\n    setBgColor(COLORS_ARRAY[randomInteger]);\n    setQuote(quotesArray[randomInteger].quote);\n    setAuthor(quotesArray[randomInteger].author);\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor:bgColor}}>\n        <div id=\"quote-box\"  style={{color:bgColor}}>\n          <p id=\"text\">\n            <FontAwesomeIcon icon={faQuoteLeft}/> {quote} <FontAwesomeIcon icon={faQuoteRight}/>\n          </p>\n          <p id=\"author\">- {author}</p>\n          \n          \n          <div className=\"button\">\n            <a id=\"tweet-quote\" style={{backgroundColor:bgColor}} href={encodeURI(`https://twitter.com/intent/tweet?text=${quote} -${author}`)}><FontAwesomeIcon icon={faTwitter} /></a>\n            <button id=\"new-quote\" onClick={getRandomQuote} style={{backgroundColor:bgColor}}>New Quote</button>\n          </div>\n          \n        </div>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}